{"componentChunkName":"component---src-templates-tutorial-tutorial-section-template-js","path":"/en/Tutorial/LibraryExamples","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/en/Tutorial/LibraryExamples\",\n  \"date\": \"February 05, 2018, at 08:43 PM\",\n  \"title\": \"Examples from Libraries\",\n  \"template\": \"tutorialSection\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Toc = makeShortcode(\"Toc\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    \"className\": \"header-img\"\n  }, mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/wiki/4294fac6060b061f87f274662bb49ede/examples_from_libraries.svg\",\n    \"alt\": null\n  })))), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/Software\"\n  }), \"Arduino Software (IDE)\"), \" can be extended through the use of Libraries, just like most programming platforms, to provide extra functionality to your sketches. These tutorials walk your through the Examples of a number of libraries that come installed with the IDE, to open them click on the toolbar menu: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File > Examples\"), \".\\nTo see the complete list of Libraries for Arduino boards (including Arduino Due, Arduino Zero and common contributed Libraries) visit the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/Libraries\"\n  }), \"Library Reference page\"), \".\"), mdx(\"div\", {\n    \"className\": \"download-box\"\n  }, mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/wiki/849deddaf8daab4ca3dd88761cc1c368/ArduinoAPP-01.svg\",\n    \"alt\": null\n  }))), mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/Software\"\n  }), \"Download the latest Arduino Software\")), \", certain fuctions may not work in earlier versions.\")), mdx(\"div\", {\n    className: \"page-content-wrapper\"\n  }, mdx(Toc, {\n    toc: props.toc,\n    mdxType: \"Toc\"\n  }), mdx(\"div\", {\n    className: \"page-content\"\n  }, mdx(\"h3\", {\n    \"id\": \"bridge-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Bridge Library\"), mdx(\"p\", null, \"Enables the communication between the Linux processor and the AVR, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/YunBridgeLibrary\"\n  }), \"Reference for the Bridge Library\"), \" page. For \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardYun\"\n  }), \"Arduino Yu\", \"\\u0301\", \"n\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Bridge\"\n  }), \"Bridge\"), \": Access the pins of the board with a web browser.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConsoleAsciiTable\"\n  }), \"Console ASCII Table\"), \": Demonstrates printing various formats to the Console.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConsolePixel\"\n  }), \"Console Pixel\"), \": Control an LED through the Console.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConsoleRead\"\n  }), \"Console Read\"), \": Parse information from the Console and repeat it back.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/YunDatalogger\"\n  }), \"Datalogger\"), \": Store sensor information on a SD card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/FileWriteScript\"\n  }), \"File Write Script\"), \": Demonstrates how to write and execute a shell script with Process.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/HttpClient\"\n  }), \"HTTP Client\"), \": Create a simple client that downloads a webpage and prints it to the serial monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/HttpClientConsole\"\n  }), \"HTTP Client Console\"), \": Create a simple client that downloads a webpage and prints it to the serial monitor via WiFi using Console.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/MailboxReadMessage\"\n  }), \"Mailbox Read Messages\"), \": Send text messages to the Arduino processor using REST API through a browser.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Process\"\n  }), \"Process\"), \": Demonstrates how to use Process to run Linux commands.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RemoteDueBlink\"\n  }), \"Remote Due Blink\"), \": Demonstrates how to upload remotely a sketch on DUE boards.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ShellCommands\"\n  }), \"Shell Commands\"), \": Use Process to run shell commands.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://docs.spacebrew.cc/\"\n  }), \"SpacebrewYun\"), \": See the Spacebrew documentation pages for more infos on the Examples listed in the Arduino Software.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://temboo.com/arduino\"\n  }), \"Temboo\"), \": See the Temboo documentation section for more infos on the Examples listed in the Arduino Software.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TemperatureWebPanel\"\n  }), \"Temperature Web Panel\"), \": Post sensor data on a webpage when requested by a browser.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TimeCheck\"\n  }), \"Time Check\"), \": Get the time from a network time server and print it to the serial monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiStatus\"\n  }), \"WiFi Status\"), \": Runs a pre-configured script that reports back the strength of the current WiFi network.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/YunFirstConfig\"\n  }), \"Yun First Config\"), \": Connect your Yun product to the WiFi networks in a breeze using the Serial Monitor and answering a few simple questions within it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/YunSerialTerminal\"\n  }), \"Yun Serial Terminal\"), \": Access the Linux Terminal through the serial monitor.\")), mdx(\"h3\", {\n    \"id\": \"eeprom-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"EEPROM Library\"), mdx(\"p\", null, \"Enables reading and writing to the permanent board storage, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/EEPROM\"\n  }), \"Reference for the EEPROM Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMClear\"\n  }), \"EEPROM Clear\"), \": Clear the bytes in the EEPROM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMRead\"\n  }), \"EEPROM Read\"), \": Read the EEPROM and send its values to the computer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMWrite\"\n  }), \"EEPROM Write\"), \": Stores values from an analog input to the EEPROM.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMCrc\"\n  }), \"EEPROM Crc\"), \": Calculates the CRC of EEPROM contents as if it was an array.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMGet\"\n  }), \"EEPROM Get\"), \": Get values from EEPROM and prints as float on serial.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMIteration\"\n  }), \"EEPROM Iteration\"), \": Understand how to go through the EEPROM memory locations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMPut\"\n  }), \"EEPROM Put\"), \": Put values in EEPROM using variable semantics.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EEPROMUpdate\"\n  }), \"EEPROM Update\"), \": Stores values read from A0 into EEPROM, writing the value only if different, to increase EEPROM life.\")), mdx(\"h3\", {\n    \"id\": \"esplora-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Esplora Library\"), mdx(\"p\", null, \"Grants easy access to the various sensors and actuators of the Esplora, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/EsploraLibrary\"\n  }), \"Reference for the Esplora Library\"), \" page. For \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardEsplora\"\n  }), \"Arduino Esplora\"), \" only. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE: \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardEsplora\"\n  }), \"Arduino Esplora\"), \" is currently retired, therefore the documentation is no longer frequently updated.\")), mdx(\"h4\", {\n    \"id\": \"beginners\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"BEGINNERS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraAccelerometer\"\n  }), \"Esplora Accelerometer\"), \": Read the values from the accelerometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraBlink\"\n  }), \"Esplora Blink\"), \": Blink the Esplora's RGB LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraJoystickMouse\"\n  }), \"Esplora Joystick Mouse\"), \": Use the Esplora's joystick to control the cursor on your computer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraLedShow\"\n  }), \"Esplora Led Show\"), \":  Use the Joystick and slider to create a light show with the LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraLedShow2\"\n  }), \"Esplora Led Show 2\"), \": Use the Esplora's microphone, linear potentiometer, and light sensor to change the color of the onboard LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraLightCalibrator\"\n  }), \"Esplora Light Calibrator\"), \": Read and calibrate the Esplora's light sensor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraMusic\"\n  }), \"Esplora Music \"), \": Make some music with the Esplora.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraSoundSensor\"\n  }), \"Esplora Sound Sensor\"), \": Read the values from the Esplora's microphone.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTemperatureSensor\"\n  }), \"Esplora Temperature Sensor\"), \": Read the temperature sensor and get the temperature in in Farhenheit or Celsius.\")), mdx(\"h4\", {\n    \"id\": \"experts\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"EXPERTS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraKart\"\n  }), \"Esplora Kart\"), \": Use the Esplora as a controller to play a kart racing game.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraPong\"\n  }), \"Esplora Pong\"), \": Play Pong with the Esplora using Processing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraRemote\"\n  }), \"Esplora Remote\"), \": Connect the Esplora to Processing and control the outputs.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTable\"\n  }), \"Esplora Table\"), \": Print the Esplora sensor information to a table format.\")), mdx(\"h3\", {\n    \"id\": \"ethernet-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Ethernet Library\"), mdx(\"p\", null, \"Enables network connection (local and Internet) using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardEthernet\"\n  }), \"Arduino Ethernet board\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoEthernetShield\"\n  }), \"shield\"), \", more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/Ethernet\"\n  }), \"Reference for the Ethernet Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/AdvancedChatServer\"\n  }), \"Advanced Chat Server\"), \": Set up a simple chat server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/BarometricPressureWebServer\"\n  }), \"Barometric Pressure Web Server\"), \": Outputs the values from a barometric pressure sensor as a web page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ChatServer\"\n  }), \"Chat Server\"), \": Set up a simple chat server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/DhcpAddressPrinter\"\n  }), \"Dhcp Address Printer\"), \": Get an IP address via DHCP and print it out.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/DhcpChatServer\"\n  }), \"Dhcp Chat Server\"), \": A simple DHCP Chat Server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TelnetClient\"\n  }), \"Telnet Client\"), \": A simple Telnet client.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/UdpNtpClient\"\n  }), \"UDP Ntp Client\"), \": Query a Network Time Protocol (NTP) server using UDP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/UDPSendReceiveString\"\n  }), \"UDP Send Receive String\"), \": Send and receive text strings via UDP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WebClient\"\n  }), \"Web Client\"), \": Make a HTTP request.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WebClientRepeating\"\n  }), \"Web Client Repeating\"), \": Make repeated HTTP requests.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WebServer\"\n  }), \"Web Server\"), \": Host a simple HTML page that displays analog sensor values.\")), mdx(\"h3\", {\n    \"id\": \"firmata-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Firmata Library\"), mdx(\"p\", null, \"Enables the communication with computer apps using a standard serial protocol. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/firmata/arduino\"\n  }), \"Guide to the Standard Firmata Library\"))), mdx(\"h3\", {\n    \"id\": \"gsm-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"GSM Library\"), mdx(\"p\", null, \"Enables GSM/GRPS network connection using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoGSMShield\"\n  }), \"Arduino GSM Shield\"), \", more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/GSM\"\n  }), \"Reference for the GSM Library\"), \" page. For all Arduino boards BUT Arduino DUE.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesWebClient\"\n  }), \"Gsm Web Client\"), \": Download the content of a website to your Arduino board through GPRS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesWebServer\"\n  }), \"Gsm Web Server\"), \": Create a wireless web server through GPRS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesMakeVoiceCall\"\n  }), \"Make Voice Call\"), \": Get your shield to make phone calls from the Serial Monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesSendSMS\"\n  }), \"Send SMS\"), \": Use the Serial Monitor to type in SMS messages to different phone numbers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesReceiveVoiceCall\"\n  }), \"Receive Voice Call\"), \": Check the status of the modem while getting voice calls.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMExamplesReceiveSMS\"\n  }), \"Receive SMS\"), \": Read SMS messages and prompt them to the Serial Monitor.\")), mdx(\"h4\", {\n    \"id\": \"tools\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"TOOLS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsBandManagement\"\n  }), \"Band Management\"), \": Manage the band the GSM shield connects to.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsGsmScanNetworks\"\n  }), \"GSM Scan Networks\"), \": Check for the available networks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsPinManagement\"\n  }), \"Pin Management\"), \": Manage the PIN number of your SIM card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsTestGPRS\"\n  }), \"Test GPRS\"), \": Test the proper functionality of the GPRS network using your SIM card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsTestModem\"\n  }), \"Test Modem\"), \": Read the IMEI of your modem.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/GSMToolsTestWebServer\"\n  }), \"Test Web Server\"), \": Create a webserver with your GSM shield.\")), mdx(\"h3\", {\n    \"id\": \"i2s-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"I2S Library\"), mdx(\"p\", null, \"Enables to use the  I2S protocol on SAMD21 board like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardZero&\"\n  }), \"Arduino Zero\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBoardMKRZero\"\n  }), \"Arduino MKRZero\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoMKR1000\"\n  }), \"Arduino MKR1000\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/I2SSimpleTone\"\n  }), \"SimpleTone\"), \": Generate a simple tone over I2S.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/I2SInputSerialPlotter\"\n  }), \"InputSerialPlotter\"), \": Show over the serial plotter the input waveform captured by an I2S microphone.\")), mdx(\"h3\", {\n    \"id\": \"liquid-crystal-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Liquid Crystal Library\"), mdx(\"p\", null, \"Allows communication with alphanumerical liquid crystal displays (LCDs), more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/LiquidCrystal\"\n  }), \"Reference for the LiquidCrystal Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalAutoscroll\"\n  }), \"Autoscroll\"), \": Shift text right and left.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalBlink\"\n  }), \"Blink\"), \": Control of the block-style cursor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalCursor\"\n  }), \"Cursor\"), \": Control of the underscore-style cursor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalDisplay\"\n  }), \"Display\"), \": Quickly blank the display without losing what's on it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/HelloWorld\"\n  }), \"Hello World\"), \": Displays \\\"hello world!\\\" and the seconds since reset.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalScroll\"\n  }), \"Scroll\"), \": Scroll text left and right.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalSerialDisplay\"\n  }), \"Serial Display\"), \": Accepts serial input, displays it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalSetCursor\"\n  }), \"Set Cursor\"), \": Set the cursor position.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/LiquidCrystalTextDirection\"\n  }), \"Text Direction\"), \": Control which way text flows from the cursor.\")), mdx(\"h3\", {\n    \"id\": \"robot-control-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Robot Control Library\"), mdx(\"p\", null, \"Enables easy access to the controls of the Arduino Robot Control board, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/RobotLibrary\"\n  }), \"Reference for the Robot Library\"), \" page. For \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/Robot\"\n  }), \"Arduino Robot\"), \" only. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE: \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/Robot\"\n  }), \"Arduino Robot\"), \" is currently retired, therefore the documentation is no longer frequently updated.\")), mdx(\"h4\", {\n    \"id\": \"explore\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"EXPLORE\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotLogo\"\n  }), \"Logo\"), \": Tell your robot where to go through the on-board keyboard.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotLineFollowing\"\n  }), \"Line Following\"), \": Draw a racing track and get your robot to run on it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotDiscoBot\"\n  }), \"Disco Bot\"), \": Turn your robot into an 8-bit jukebox and dance to the beat.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotCompass\"\n  }), \"Compass\"), \": Plan a treasure hunt with this digital compass.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotInputs\"\n  }), \"Inputs\"), \": Learn how to control the knob and the keyboard.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotWheelCalibration\"\n  }), \"Wheel Calibration\"), \": Tune the wheels to perform even better.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotRunawayRobot\"\n  }), \"Runaway Robot\"), \": Play tag with your robot using a distance sensor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotRemoteControl\"\n  }), \"Remote Control\"), \": Reuse that old tv-remote to command the bot on distance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotPictureBrowser\"\n  }), \"Picture Browser\"), \": Want to use your own images? This is how.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotRescue\"\n  }), \"Rescue\"), \": Train your robot to look for hidden pearls in a maze.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotHelloUser\"\n  }), \"Hello User\"), \": Hack the robot's welcome demo and make your own.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/RobotCompassCalibration\"\n  }), \"Calibrate Compass\"), \": Calibrate the compass module so it rotates evenly.\")), mdx(\"h3\", {\n    \"id\": \"sd-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"SD Library\"), mdx(\"p\", null, \"Enables reading and writing on SD cards, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/SD\"\n  }), \"Reference for the SD Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/CardInfo\"\n  }), \"Card Info\"), \": Get info about your SD card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Datalogger\"\n  }), \"Datalogger\"), \": Log data from three analog sensors to an SD card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/DumpFile\"\n  }), \"Dump File\"), \": Read a file from the SD card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Files\"\n  }), \"Files\"), \": Create and destroy an SD card file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Listfiles\"\n  }), \"List Files\"), \": Print out the files in a directory on a SD card.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ReadWrite\"\n  }), \"Read Write\"), \": Read and write data to and from an SD card.\")), mdx(\"h3\", {\n    \"id\": \"servo-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Servo Library\"), mdx(\"p\", null, \"Allows Arduino boards to control a variety of servo motors, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/Servo\"\n  }), \"Reference for the Servo Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/Knob\"\n  }), \"Knob\"), \": Control the position of a servo with a potentiometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Sweep\"\n  }), \"Sweep\"), \": Sweep the shaft of a servo motor back and forth.\")), mdx(\"h3\", {\n    \"id\": \"software-serial-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Software Serial Library\"), mdx(\"p\", null, \"Enables serial communication on digital pins, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/SoftwareSerial\"\n  }), \"Reference for the Software Serial Library\"), \" page. For all Arduino boards, BUT Arduino DUE.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/SoftwareSerialExample\"\n  }), \"Software Serial Example\"), \": Use this Library... because sometimes one serial port just isn't enough!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TwoPortReceive\"\n  }), \"Two Port Receive\"), \": Work with multiple software serial ports.\")), mdx(\"h3\", {\n    \"id\": \"spi-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"SPI Library\"), mdx(\"p\", null, \"Enables the communication with devices that use the Serial Peripheral Interface (SPI) Bus, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/SPI\"\n  }), \"Reference for the SPI Library\"), \" page. For all Arduino boards, BUT Arduino DUE.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/BarometricPressureSensor\"\n  }), \"Barometric Pressure Sensor\"), \": Read air pressure and temperature from a sensor using the SPI protocol.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/DigitalPotControl\"\n  }), \"Digital Pot Control\"), \": Control a AD5206 digital potentiometer using the SPI protocol.\")), mdx(\"h3\", {\n    \"id\": \"stepper-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Stepper Library\"), mdx(\"p\", null, \"Allows Arduino boards to control a variety of stepper motors, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/Stepper\"\n  }), \"Reference for the Stepper Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/MotorKnob\"\n  }), \"Motor Knob\"), \": Control a highly accurate stepper motor using a potentiometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/StepperOneRevolution\"\n  }), \"Stepper One Revolution\"), \": Turn the shaft one revolution clockwise and one counterclockwise.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/StepperOneStepAtATime\"\n  }), \"Stepper One Step At A Time\"), \": Turn the shaft step by step to check the proper wiring of the motor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/StepperSpeedControl\"\n  }), \"Stepper Speed Control\"), \": Control the stepping speed with a potentiometer.\")), mdx(\"h3\", {\n    \"id\": \"tft-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"TFT Library\"), mdx(\"p\", null, \"Allows drawing text, images, and shapes on the Arduino TFT graphical display, more informations at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/TFTLibrary\"\n  }), \"Reference for the TFT Library\"), \" page. For all Arduino boards. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE: \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/GTFT\"\n  }), \"Arduino TFT LCD Screen\"), \" is currently retired, therefore the documentation is no longer frequently updated.\")), mdx(\"h4\", {\n    \"id\": \"arduino\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ARDUINO\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTBitmapLogo\"\n  }), \"TFT Bitmap Logo\"), \": Read an image file from a micro-SD card and draw it at random locations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTColorPicker\"\n  }), \"TFT Color Picker\"), \": With three sensors, change the color of the TFT screen.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTDisplayText\"\n  }), \"TFT Display Text\"), \": Read the value of a sensor and print it on the screen.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTEtchASketch\"\n  }), \"TFT Etch a Sketch\"), \": An Arduino version of the classic Etch-a-Sketch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTGraph\"\n  }), \"TFT Graph\"), \": Graph the values from a variable resistor to the TFT.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/TFTPong\"\n  }), \"TFT Pong\"), \": An Arduino implementation of the classic game.\")), mdx(\"h4\", {\n    \"id\": \"esplora\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ESPLORA\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTBitmapLogo\"\n  }), \"Esplora TFT Bitmap Logo\"), \": Use the Esplora as a controller to play a kart racing game.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTColorPicker\"\n  }), \"Esplora TFT Color Picker\"), \": Using the joystick and slider, change the color of the TFT screen.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTEtchASketch\"\n  }), \"Esplora TFT Etch a Sketch\"), \": An Esplora implementation of the classic Etch-a-Sketch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTGraph\"\n  }), \"Esplora TFT Graph\"), \": Graph the values from the light sensor to the TFT.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTHorizon\"\n  }), \"Esplora TFT Horizon\"), \": Draw an artificial horizon line based on the tilt from the accelerometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTPong\"\n  }), \"Esplora TFT Pong\"), \": A basic implementation of the classic game.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/EsploraTFTTemp\"\n  }), \"Esplora TFT Temp\"), \": Check the temperature with the onboard sensor and display it on screen.\")), mdx(\"h3\", {\n    \"id\": \"vidor-libraries\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Vidor libraries\"), mdx(\"p\", null, \"The Arduino MKR Vidor 4000 libraries contain the APIs and the FPGA bitstream to implement low and high level functions that may fit your needs for peripherals communication, audio and video. Many of the functions have the same structure and syntax of the standard ones for SPI, UART and Wire. The following examples address new functions.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/VidorEnableCam\"\n  }), \"Enable Camera\"), \": Enables the video stream from a camera to an HDMI monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/VidorDrawLogo\"\n  }), \"Draw Logo\"), \": Draw the Arduino Logo on an HDMI monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/VidorQrRecognition\"\n  }), \"QR Recognition\"), \": The QR library allows you to recognize QR code markers and data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/VidorEncoder\"\n  }), \"Encoder\"), \": Manage easily quadrature encoders and never lose an impulse.\")), mdx(\"h3\", {\n    \"id\": \"wifi-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"WiFi Library\"), mdx(\"p\", null, \"Enables network connection (local and Internet) using the Arduino WiFi Shield, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/WiFi\"\n  }), \"Reference for the WiFi Library\"), \" page. For all Arduino boards. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE: \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoWiFiShield\"\n  }), \"Arduino WiFi Shield\"), \" is currently retired, therefore the documentation is no longer frequently updated.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConnectNoEncryption\"\n  }), \"Connect No Encryption\"), \": Demonstrates how to connect to an open network.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConnectWithWEP\"\n  }), \"Connect With WEP\"), \": Demonstrates how to connect to a network that is encrypted with WEP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ConnectWithWPA\"\n  }), \"Connect With WPA\"), \": Demonstrates how to connect to a network that is encrypted with WPA2 Personal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/ScanNetworks\"\n  }), \"Scan Networks\"), \": Displays all WiFi networks in range.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/SimpleWebServerWiFi\"\n  }), \"Simple Web Server WiFi\"), \": Turn on and off an LED accessing this simple Web Server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/UdpNtpClient\"\n  }), \"UDP NTP Client\"), \": Query a Network Time Protocol (NTP) server using UDP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiChatServer\"\n  }), \"WiFi Chat Server\"), \": Set up a simple chat server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiWebClient\"\n  }), \"WiFi Web Client\"), \": Connect to a remote webserver.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiWebClientRepeating\"\n  }), \"WiFi Web Client Repeating\"), \": Repeatedly make HTTP calls to a server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiWebServer\"\n  }), \"WiFi Web Server\"), \": Serve a webpage from the WiFi shield with Analog Input values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiUdpSendReceiveString\"\n  }), \"WiFi Send Receive UDP String\"), \": Send and receive a UDP string.\")), mdx(\"h3\", {\n    \"id\": \"wifi-nina-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"WiFi NINA Library\"), mdx(\"p\", null, \"Enables network connection (local and Internet) using HTTP or HTTPS protocol using the Arduino MKR WiFi 1010, the Arduino UNO WiFi Rev.2 and the Arduino MKR VIDOR 4000, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/WiFiNINA\"\n  }), \"Reference for the WiFi NINA Library\"), \" page.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/WiFiNINAAP_SimpleWebServer\"\n  }), \"AP SimpleWebServer\"), \": A simple web server to manage a LED with AP feature.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAConnectNoEncryption\"\n  }), \"Connect No Encryption\"), \": Demonstrates how to connect to an open network.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAConnectWithWEP\"\n  }), \"Connect With WEP\"), \": Demonstrates how to connect to a network that is encrypted with WEP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAConnectWithWPA\"\n  }), \"Connect With WPA\"), \": Demonstrates how to connect to a network that is encrypted with WPA2 Personal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAScanNetworks\"\n  }), \"Scan Networks\"), \": Displays all WiFi networks in range.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAScanNetworksAdvanced\"\n  }), \"Scan Networks Advanced\"), \":  Displays all WiFi networks in range with more details.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINASimpleWebServerWiFI\"\n  }), \"Simple Web Server WiFi\"), \": Turn on and off an LED accessing this simple Web Server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiChatServer\"\n  }), \"WiFi Chat Server\"), \": Set up a simple chat server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiPing\"\n  }), \"WiFi Ping\"), \": Demonstrates how to ping a website or IP address.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiSSLClient\"\n  }), \"WiFi SSL Client\"), \": Connect to a website using SSL.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAUdpNTPClient\"\n  }), \"UDP NTP Client\"), \": Query a Network Time Protocol (NTP) server using UDP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiUdpSendReceiveString\"\n  }), \"WiFi Send Receive UDP String\"), \": Send and receive a UDP string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiWebClient\"\n  }), \"WiFi Web Client\"), \": Connect to a remote webserver.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiWebClientRepeating\"\n  }), \"WiFi Web Client Repeating\"), \": Repeatedly make HTTP calls to a server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/WiFiNINAWiFiWebServer\"\n  }), \"WiFi Web Server\"), \": Serve a webpage from the WiFi shield with Analog Input values.\")), mdx(\"h3\", {\n    \"id\": \"wifi-shield-101-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"WiFi Shield 101 Library\"), mdx(\"p\", null, \"Enables network connection (local and Internet) using HTTP or HTTPS protocol using the Arduino WiFi Shield 101, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/WiFi101\"\n  }), \"Reference for the WiFi shield 101 Library\"), \" page. Learn how to install this library on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Guide/ArduinoWiFiShield101\"\n  }), \"Getting started page\"), \". Only for Wifi Shield 101.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101ConnectNoEncryption\"\n  }), \"Connect No Encryption\"), \": Demonstrates how to connect to an open network.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101ConnectWithWEP\"\n  }), \"Connect With WEP\"), \": Demonstrates how to connect to a network that is encrypted with WEP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101ConnectWithWPA\"\n  }), \"Connect With WPA\"), \": Demonstrates how to connect to a network that is encrypted with WPA2 Personal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101ScanNetworks\"\n  }), \"Scan Networks\"), \": Displays all WiFi networks in range.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101SimpleWebServerWiFi\"\n  }), \"Simple Web Server WiFi\"), \": Turn on and off an LED accessing this simple Web Server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101UdpNTPClient\"\n  }), \"UDP NTP Client\"), \": Query a Network Time Protocol (NTP) server using UDP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101WiFiChatServer\"\n  }), \"WiFi Chat Server\"), \": Set up a simple chat server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101WiFiWebClient\"\n  }), \"WiFi Web Client\"), \": Connect to a remote webserver.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101WiFiWebClientRepeating\"\n  }), \"WiFi Web Client Repeating\"), \": Repeatedly make HTTP calls to a server.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101WiFiWebServer\"\n  }), \"WiFi Web Server\"), \": Serve a webpage from the WiFi shield with Analog Input values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/Wifi101WiFiUdpSendReceiveString\"\n  }), \"WiFi Send Receive UDP String\"), \": Send and receive a UDP string.\")), mdx(\"h3\", {\n    \"id\": \"wire-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Wire Library\"), mdx(\"p\", null, \"Allows the communication between devices or sensors connected via Two Wire Interface Bus, more information at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Reference/Wire\"\n  }), \"Reference for the Wire Library\"), \" page. For all Arduino boards.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/DigitalPotentiometer\"\n  }), \"Digital Potentiometer\"), \": Control an Analog Devices AD5171 Digital Potentiometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/MasterReader\"\n  }), \"Master Reader/Slave Writer\"), \": Program two Arduino boards to communicate with one another in a Master Reader/Slave Sender configuration via the I2C.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/MasterWriter\"\n  }), \"Master Writer/Slave receiver\"), \":Program two Arduino boards to communicate with one another in a Master Writer/Slave Receiver configuration via the I2C.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/LibraryExamples/SFRRangerReader\"\n  }), \"SFR Ranger Reader\"), \": Read an ultra-sonic range finder interfaced via the I2C.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#bridge-library","title":"Bridge Library"},{"url":"#eeprom-library","title":"EEPROM Library"},{"url":"#esplora-library","title":"Esplora Library","items":[{"url":"#beginners","title":"BEGINNERS"},{"url":"#experts","title":"EXPERTS"}]},{"url":"#ethernet-library","title":"Ethernet Library"},{"url":"#firmata-library","title":"Firmata Library"},{"url":"#gsm-library","title":"GSM Library","items":[{"url":"#tools","title":"TOOLS"}]},{"url":"#i2s-library","title":"I2S Library"},{"url":"#liquid-crystal-library","title":"Liquid Crystal Library"},{"url":"#robot-control-library","title":"Robot Control Library","items":[{"url":"#explore","title":"EXPLORE"}]},{"url":"#sd-library","title":"SD Library"},{"url":"#servo-library","title":"Servo Library"},{"url":"#software-serial-library","title":"Software Serial Library"},{"url":"#spi-library","title":"SPI Library"},{"url":"#stepper-library","title":"Stepper Library"},{"url":"#tft-library","title":"TFT Library","items":[{"url":"#arduino","title":"ARDUINO"},{"url":"#esplora","title":"ESPLORA"}]},{"url":"#vidor-libraries","title":"Vidor libraries"},{"url":"#wifi-library","title":"WiFi Library"},{"url":"#wifi-nina-library","title":"WiFi NINA Library"},{"url":"#wifi-shield-101-library","title":"WiFi Shield 101 Library"},{"url":"#wire-library","title":"Wire Library"}]},"frontmatter":{"date":"February 05, 2018, at 08:43 PM","slug":"/en/Tutorial/LibraryExamples","title":"Examples from Libraries"}}},"pageContext":{"slug":"/en/Tutorial/LibraryExamples","locale":"en","availableLocales":["en"],"breadcrumb":{"location":"/en/Tutorial/LibraryExamples","crumbs":[{"pathname":"/","crumbLabel":"Home"},{"pathname":"/en","crumbLabel":"en"},{"pathname":"/en/Tutorial","crumbLabel":"Tutorial"},{"pathname":"/en/Tutorial/LibraryExamples","crumbLabel":"LibraryExamples"}]}}}}