{"componentChunkName":"component---src-templates-tutorial-tutorial-section-template-js","path":"/en/Tutorial/BuiltInExamples","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/en/Tutorial/BuiltInExamples\",\n  \"date\": \"February 05, 2018, at 08:43 PM\",\n  \"title\": \"Built-In Examples\",\n  \"template\": \"tutorialSection\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Toc = makeShortcode(\"Toc\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    \"className\": \"header-img\"\n  }, mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/wiki/8ad836413c439b20ab9d21727896baf8/built_in_examples.svg\",\n    \"alt\": null\n  })))), mdx(\"p\", null, \"Built-in Examples are sketches included in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/Software\"\n  }), \"Arduino Software (IDE)\"), \", to open them click on the toolbar menu: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File > Examples\"), \". These simple programs demonstrate all basic Arduino commands. They span from a Sketch Bare Minimum to Digital and Analog IO, to the use of Sensors and Displays.\"), mdx(\"div\", {\n    \"className\": \"download-box\"\n  }, mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/wiki/849deddaf8daab4ca3dd88761cc1c368/ArduinoAPP-01.svg\",\n    \"alt\": null\n  }))), mdx(\"p\", {\n    parentName: \"div\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"/wiki/en/Main/Software\"\n  }), \"Download the latest Arduino Software\")), \", certain fuctions may not work in earlier versions.\")), mdx(\"div\", {\n    className: \"page-content-wrapper\"\n  }, mdx(Toc, {\n    toc: props.toc,\n    mdxType: \"Toc\"\n  }), mdx(\"div\", {\n    className: \"page-content\"\n  }, mdx(\"h3\", {\n    \"id\": \"1-basics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"1\", \".\", \" Basics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/AnalogReadSerial\"\n  }), \"Analog Read Serial\"), \": Read a potentiometer, print its state out to the Arduino Serial Monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/BareMinimum\"\n  }), \"Bare Minimum\"), \": The bare minimum of code needed to start an Arduino sketch.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Blink\"\n  }), \"Blink\"), \": Turn an LED on and off.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/DigitalReadSerial\"\n  }), \"Digital Read Serial\"), \": Read a switch, print the state out to the Arduino Serial Monitor.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Fade\"\n  }), \"Fade\"), \": Demonstrates the use of analog output to fade an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ReadAnalogVoltage\"\n  }), \"Read Analog Voltage\"), \": Reads an analog input and prints the voltage to the Serial Monitor.\")), mdx(\"h3\", {\n    \"id\": \"2-digital\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"2\", \".\", \" Digital\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/BlinkWithoutDelay\"\n  }), \"Blink Without Delay\"), \": Blink an LED without using the delay() function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Button\"\n  }), \"Button\"), \": Use a pushbutton to control an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Debounce\"\n  }), \"Debounce\"), \": Read a pushbutton, filtering noise.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/InputPullupSerial\"\n  }), \"Digital Input Pullup\"), \": Demonstrates the use of INPUT_PULLUP with pinMode().\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StateChangeDetection\"\n  }), \"State Change Detection\"), \": Count the number of button pushes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/toneKeyboard\"\n  }), \"Tone Keyboard\"), \": A three-key musical keyboard using force sensors and a piezo speaker.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/toneMelody\"\n  }), \"Tone Melody\"), \": Play a melody with a Piezo speaker.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/toneMultiple\"\n  }), \"Tone Multiple\"), \": Play tones on multiple speakers sequentially using the tone() command.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/tonePitchFollower\"\n  }), \"Tone Pitch Follower\"), \": Play a pitch on a piezo speaker depending on an analog input.\")), mdx(\"h3\", {\n    \"id\": \"3-analog\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"3\", \".\", \" Analog\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/AnalogInOutSerial\"\n  }), \"Analog In Out Serial\"), \": Read an analog input pin, map the result, and then use that data to dim or brighten an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/AnalogInput\"\n  }), \"Analog Input\"), \": Use a potentiometer to control the blinking of an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/AnalogWriteMega\"\n  }), \"Analog Write Mega\"), \": Fade 12 LEDs on and off, one by one, using an Arduino Mega board.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Calibration\"\n  }), \"Calibration\"), \": Define a maximum and minimum for expected analog sensor values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Fading\"\n  }), \"Fading\"), \": Use an analog output (PWM pin) to fade an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Smoothing\"\n  }), \"Smoothing\"), \": Smooth multiple readings of an analog input.\")), mdx(\"h3\", {\n    \"id\": \"4-communication\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"4\", \".\", \" Communication\"), mdx(\"p\", null, \"These examples include code that allows the Arduino to talk to Processing sketches running on the computer. For more information or to download Processing, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://processing.org/\"\n  }), \"processing.org\"), \".\\nThere are also Max/MSP patches that can communicate with each Arduino sketch as well. For more on Max/MSP see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://cycling74.com/\"\n  }), \"Cycling 74\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ASCIITable\"\n  }), \"ASCIITable\"), \": Demonstrates Arduino's advanced serial output functions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Dimmer\"\n  }), \"Dimmer\"), \": Move the mouse to change the brightness of an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Graph\"\n  }), \"Graph\"), \": Send data to the computer and graph it in Processing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Midi\"\n  }), \"Midi\"), \": Send MIDI note messages serially.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/MultiSerialMega\"\n  }), \"Multi Serial Mega\"), \": Use two of the serial ports available on the Arduino Mega.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/PhysicalPixel\"\n  }), \"Physical Pixel\"), \": Turn a LED on and off by sending data to your Arduino from Processing or Max/MSP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ReadASCIIString\"\n  }), \"Read ASCII String\"), \": Parse a comma-separated string of integers to fade an LED.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SerialCallResponse\"\n  }), \"Serial Call Response\"), \": Send multiple variables using a call-and-response (handshaking) method.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SerialCallResponseASCII\"\n  }), \"Serial Call Response ASCII\"), \": Send multiple variables using a call-and-response (handshaking) method, and ASCII-encode the values before sending.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SerialEvent\"\n  }), \"Serial Event\"), \": Demonstrates the use of serialEvent().\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SerialPassthrough\"\n  }), \"Serial Passthrough\"), \": Demonstrates how to virtually connect Serial and Serial1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/VirtualColorMixer\"\n  }), \"Virtual Color Mixer\"), \": Send multiple variables from Arduino to your computer and read them in Processing or Max/MSP.\")), mdx(\"h3\", {\n    \"id\": \"5-control-structures\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"5\", \".\", \" Control Structures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Arrays\"\n  }), \"Arrays\"), \": A variation on the For Loop example that demonstrates how to use an array.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ForLoopIteration\"\n  }), \"For Loop Iteration\"), \": Control multiple LEDs with a for loop and.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ifStatementConditional\"\n  }), \"If Statement Conditional\"), \": Use an \", \"\\u2018\", \"if statement' to change the output conditions based on changing the input conditions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SwitchCase\"\n  }), \"Switch Case\"), \": How to choose between a discrete number of values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/SwitchCase2\"\n  }), \"Switch Case 2\"), \": A second switch-case example, showing how to take different actions based on the characters received in the serial port.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/WhileStatementConditional\"\n  }), \"While Statement Conditional\"), \": How to use a while loop to calibrate a sensor while a button is being read.\")), mdx(\"h3\", {\n    \"id\": \"6-sensors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"6\", \".\", \" Sensors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ADXL3xx\"\n  }), \"ADXL3xx\"), \": Read an ADXL3xx accelerometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Knock\"\n  }), \"Knock\"), \": Detect knocks with a piezo element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Memsic2125\"\n  }), \"Memsic2125\"), \": Two-axis accelerometer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/Ping\"\n  }), \"Ping\"), \": Detect objects with an ultrasonic range finder.\")), mdx(\"h3\", {\n    \"id\": \"7-display\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"7\", \".\", \" Display\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/BarGraph\"\n  }), \"Bar Graph\"), \": Make an LED bar graph.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/RowColumnScanning\"\n  }), \"RowColumnScanning\"), \": Control an 8x8 matrix of LEDs.\")), mdx(\"h3\", {\n    \"id\": \"8-strings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"8\", \".\", \" Strings\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/CharacterAnalysis\"\n  }), \"Character Analysis\"), \": Use the operators to recognise the type of character we are dealing with.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringAdditionOperator\"\n  }), \"String Addition Operator\"), \": Add strings together in a variety of ways.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringAppendOperator\"\n  }), \"String Append Operator\"), \": Use the += operator and the concat() method to append things to Strings.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringCaseChanges\"\n  }), \"String Case Changes\"), \": Change the case of a string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringCharacters\"\n  }), \"String Characters\"), \": Get/set the value of a specific character in a string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringComparisonOperators\"\n  }), \"String Comparison Operators\"), \": Compare strings alphabetically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringConstructors\"\n  }), \"String Constructors\"), \": Initialize string objects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringIndexOf\"\n  }), \"String Index Of\"), \": Look for the first/last instance of a character in a string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringLengthTrim\"\n  }), \"String Length & String Length Trim\"), \": Get and trim the length of a string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringReplace\"\n  }), \"String Replace\"), \": Replace individual characters in a string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringStartsWithEndsWith\"\n  }), \"String Start With Ends With\"), \": Check which characters/substrings a given string starts or ends with.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringSubstring\"\n  }), \"String Substring\"), \": Look for \\\"phrases\\\" within a given string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/StringToInt\"\n  }), \"String To Int\"), \": Allows you to convert a String to an integer number.\")), mdx(\"h3\", {\n    \"id\": \"9-usb\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"9\", \".\", \" USB\"), mdx(\"p\", null, \"The Keyboard and Mouse examples are unique to the Leonardo, Micro and Due. They demonstrate the use of libraries that are unique to the board.\"), mdx(\"h4\", {\n    \"id\": \"keyboard\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"KEYBOARD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/KeyboardLogout\"\n  }), \"Keyboard Logout\"), \": Logs out the current user with key commands.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/KeyboardMessage\"\n  }), \"Keyboard Message\"), \": Sends a text string when a button is pressed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/KeyboardReprogram\"\n  }), \"Keyboard Reprogram\"), \": Opens a new window in the Arduino IDE and reprograms the Leonardo with a simple blink program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/KeyboardSerial\"\n  }), \"Keyboard Serial\"), \": Reads a byte from the serial port, and sends back a keystroke.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/KeyboardAndMouseControl\"\n  }), \"Keyboard Mouse Control\"), \": Demonstrates the Mouse and Keyboard commands in one program.\")), mdx(\"h4\", {\n    \"id\": \"mouse\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"MOUSE\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ButtonMouseControl\"\n  }), \"Button Mouse Control\"), \": Control cursor movement with 5 pushbuttons.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/JoystickMouseControl\"\n  }), \"Joystick Mouse Contol\"), \": Controls a computer's cursor movement with a Joystick when a button is pressed.\")), mdx(\"h3\", {\n    \"id\": \"10-starterkit--basickit\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"10\", \".\", \" Starterkit & BasicKit\"), mdx(\"p\", null, \"Tutorials for the Examples of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoStarterKit\"\n  }), \"StarterKit\"), \" are available in the Project Book included in the kit, if you purchase a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/ArduinoBasicKit\"\n  }), \"BasicKit\"), \" you will be able to access the projects online on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://123d.circuits.io/shop/arduino\"\n  }), \"Project Ignite\"), \".\"), mdx(\"h3\", {\n    \"id\": \"11-arduino-isp\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"11\", \".\", \" Arduino ISP\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ArduinoISP\"\n  }), \"Arduino ISP\"), \" turns your Arduino into an in-circuit programmer to re-program AtMega chips.\\nUseful when you need to re-load the bootloader on an Arduino, if you're\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Tutorial/BuiltInExamples/ArduinoToBreadboard\"\n  }), \"going from Arduino to an AtMega on a breadboard\"), \"\\n, or if you're making your own \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/en/Main/Standalone\"\n  }), \" Arduino-compatible circuit on a breadboard\"), \".\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-basics","title":"1. Basics"},{"url":"#2-digital","title":"2. Digital"},{"url":"#3-analog","title":"3. Analog"},{"url":"#4-communication","title":"4. Communication"},{"url":"#5-control-structures","title":"5. Control Structures"},{"url":"#6-sensors","title":"6. Sensors"},{"url":"#7-display","title":"7. Display"},{"url":"#8-strings","title":"8. Strings"},{"url":"#9-usb","title":"9. USB","items":[{"url":"#keyboard","title":"KEYBOARD"},{"url":"#mouse","title":"MOUSE"}]},{"url":"#10-starterkit--basickit","title":"10. Starterkit & BasicKit"},{"url":"#11-arduino-isp","title":"11. Arduino ISP"}]},"frontmatter":{"date":"February 05, 2018, at 08:43 PM","slug":"/en/Tutorial/BuiltInExamples","title":"Built-In Examples"}}},"pageContext":{"slug":"/en/Tutorial/BuiltInExamples","locale":"en","availableLocales":["en"],"breadcrumb":{"location":"/en/Tutorial/BuiltInExamples","crumbs":[{"pathname":"/","crumbLabel":"Home"},{"pathname":"/en","crumbLabel":"en"},{"pathname":"/en/Tutorial","crumbLabel":"Tutorial"},{"pathname":"/en/Tutorial/BuiltInExamples","crumbLabel":"BuiltInExamples"}]}}}}